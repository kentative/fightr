/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'Kent' at '2/17/17 10:10 PM' with Gradle 3.1
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.1/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'eclipse'

// 1.7 is needed to use common library on android
sourceCompatibility = 1.7
targetCompatibility = 1.7
 
repositories {
    jcenter()
}

// In this section you declare the dependencies for your production and test code
dependencies {
	
	compile 'org.slf4j:slf4j-api:1.7.21'
	compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.1'
	
	// Tomcat already have websocket implementation, won't need this, 
	// but will need to change implementation to use standard websocket api
	compile group: 'org.java-websocket', name: 'Java-WebSocket', version: '1.3.0'
	compile group: 'org.glassfish.tyrus', name: 'tyrus-client', version: '1.13.1'
	
//	compile group: 'org.glassfish.tyrus', name: 'tyrus-container-grizzly-client', version: '1.13.1'
//	compile group: 'org.glassfish.tyrus', name: 'tyrus-server', version: '1.13.1'
	
	compile group: 'javax.json', name: 'javax.json-api', version: '1.0'
	compile group: 'commons-validator', name: 'commons-validator', version: '1.3.1'
	compile group: 'org.hibernate', name: 'hibernate-core', version: '5.2.8.Final'
	compile group: 'org.glassfish.jersey.containers', name: 'jersey-container-servlet', version: '2.26-b02'
	compile group: 'com.google.code.gson', name: 'gson', version: '2.8.0'
	
	testCompile group: 'org.jmockit', name: 'jmockit', version: '1.30'
	testCompile 'junit:junit:4.12'
	
	compile group: 'javax.servlet', name: 'servlet-api', version: '2.5'
}

eclipse {
	classpath {

		// Doing this group both main classes and test classes in the same directory
		// This is bad for the fighter-common.jar --it also contain test classes
		//		defaultOutputDir = file('build/classes/main')
		downloadSources = true
		downloadJavadoc = true
	}
}

task deployTomcat(type: Copy) {
	description = "Deploy the war file to Tomcat runtime folder"
	from war
	into "${System.env.CATALINA_HOME}/webapps"
}

task distFightrCommon(type: Jar, dependsOn: classes){
	description ="Distribute the Fightr common classes to the client lib directory"
	baseName = "fightr-common" // [baseName]-[appendix]-[version]-[classifier].[extension]
	from sourceSets.main.output.classesDir
	include(
		'com/bytes/fightr/common/**/*.*',
		'com/bytes/fmk/payload/**/*.*',
		'com/bytes/fmk/event/**/*.*',
		'com/bytes/fmk/model/**/*.*',
		'com/bytes/fmk/observer/**/*.*',
		'com/bytes/gamr/**/*.*',
	)
	destinationDir = file('../client/Fightr/app/libs/')
} 
